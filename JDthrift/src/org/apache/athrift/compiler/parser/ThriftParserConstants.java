/* Generated By:JavaCC: Do not edit this line. ThriftParserConstants.java */
package org.apache.athrift.compiler.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ThriftParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LBRACE = 9;
  /** RegularExpression Id. */
  int RBRACE = 10;
  /** RegularExpression Id. */
  int EQUALS = 11;
  /** RegularExpression Id. */
  int COLON = 12;
  /** RegularExpression Id. */
  int LBRACKET = 13;
  /** RegularExpression Id. */
  int RBRACKET = 14;
  /** RegularExpression Id. */
  int LPAREN = 15;
  /** RegularExpression Id. */
  int RPAREN = 16;
  /** RegularExpression Id. */
  int PERIOD = 17;
  /** RegularExpression Id. */
  int LRACKET = 18;
  /** RegularExpression Id. */
  int RRACKET = 19;
  /** RegularExpression Id. */
  int MAP = 20;
  /** RegularExpression Id. */
  int LIST = 21;
  /** RegularExpression Id. */
  int SET = 22;
  /** RegularExpression Id. */
  int STRUCT = 23;
  /** RegularExpression Id. */
  int THROWS = 24;
  /** RegularExpression Id. */
  int VOID = 25;
  /** RegularExpression Id. */
  int ONEWAY = 26;
  /** RegularExpression Id. */
  int EXTENDS = 27;
  /** RegularExpression Id. */
  int SERVICE = 28;
  /** RegularExpression Id. */
  int ENUM = 29;
  /** RegularExpression Id. */
  int TYPEDEF = 30;
  /** RegularExpression Id. */
  int CONST = 31;
  /** RegularExpression Id. */
  int EXCEPTION = 32;
  /** RegularExpression Id. */
  int NAMESPACE = 33;
  /** RegularExpression Id. */
  int FieldReq = 34;
  /** RegularExpression Id. */
  int INCLUDE = 35;
  /** RegularExpression Id. */
  int Identifier = 36;
  /** RegularExpression Id. */
  int ListSeparator = 37;
  /** RegularExpression Id. */
  int Literal = 38;
  /** RegularExpression Id. */
  int HEX_LITERAL = 39;
  /** RegularExpression Id. */
  int IntConstant = 40;
  /** RegularExpression Id. */
  int DoubleConstant = 41;
  /** RegularExpression Id. */
  int EXPONENT = 42;
  /** RegularExpression Id. */
  int CppType = 43;
  /** RegularExpression Id. */
  int FieldID = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "<token of kind 8>",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\":\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\"<\"",
    "\">\"",
    "\"map\"",
    "\"list\"",
    "\"set\"",
    "\"struct\"",
    "\"throws\"",
    "\"void\"",
    "\"oneway\"",
    "\"extends\"",
    "\"service\"",
    "\"enum\"",
    "\"typedef\"",
    "\"const\"",
    "\"exception\"",
    "\"namespace\"",
    "<FieldReq>",
    "\"include\"",
    "<Identifier>",
    "<ListSeparator>",
    "<Literal>",
    "<HEX_LITERAL>",
    "<IntConstant>",
    "<DoubleConstant>",
    "<EXPONENT>",
    "<CppType>",
    "<FieldID>",
    "\"*\"",
  };

}
