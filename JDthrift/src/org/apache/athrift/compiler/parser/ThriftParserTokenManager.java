/* Generated By:JavaCC: Do not edit this line. ThriftParserTokenManager.java */
package org.apache.athrift.compiler.parser;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.io.File;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.apache.athrift.compiler.*;
import org.apache.athrift.compiler.ConstType;
import org.apache.athrift.compiler.ConstValue;
import org.apache.athrift.compiler.Enum;
import org.apache.athrift.compiler.Field;
import org.apache.athrift.compiler.FieldType;
import org.apache.athrift.compiler.FieldType_HMap;
import org.apache.athrift.compiler.FieldType_List;
import org.apache.athrift.compiler.FieldType_Set;
import org.apache.athrift.compiler.Function;
import org.apache.athrift.compiler.Service;
import org.apache.athrift.compiler.Struct;
import org.apache.athrift.compiler.ThriftDescriptor;
import org.apache.athrift.compiler.ThrowType;
import org.apache.athrift.compiler.Typedef;

/** Token Manager. */
public class ThriftParserTokenManager implements ThriftParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 36;
            return 17;
         }
         if ((active0 & 0xb7bf00000L) != 0L)
         {
            jjmatchedKind = 36;
            return 20;
         }
         if ((active0 & 0x20000L) != 0L)
            return 39;
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 36;
            return 77;
         }
         return -1;
      case 1:
         if ((active0 & 0xbfff00000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 20;
         }
         return -1;
      case 2:
         if ((active0 & 0xbffa00000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0x500000L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0xbdd800000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active0 & 0x22200000L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0xb5d800000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0xb58000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0x5800000L) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active0 & 0x300000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
            return 20;
         }
         if ((active0 & 0x858000000L) != 0L)
            return 20;
         return -1;
      case 7:
         if ((active0 & 0x300000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
            return 20;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 40:
         return jjStopAtPos(0, 15);
      case 41:
         return jjStopAtPos(0, 16);
      case 42:
         return jjStopAtPos(0, 45);
      case 46:
         return jjStartNfaWithStates_0(0, 17, 39);
      case 58:
         return jjStopAtPos(0, 12);
      case 60:
         return jjStopAtPos(0, 18);
      case 61:
         return jjStopAtPos(0, 11);
      case 62:
         return jjStopAtPos(0, 19);
      case 91:
         return jjStopAtPos(0, 13);
      case 93:
         return jjStopAtPos(0, 14);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x128000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10c00000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x41000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 123:
         return jjStopAtPos(0, 9);
      case 125:
         return jjStopAtPos(0, 10);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200100000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x824000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x82000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x108000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 112:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x11800000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 20);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x348000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 109:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 20);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 20);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 20);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x808000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 20);
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 20);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 20);
         break;
      case 102:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 20);
         break;
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 94;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 20:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(20);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddStates(0, 9);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  else if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if ((0x800100000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 47)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(39);
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(1, 2);
                  if (curChar == 45)
                     jjAddStates(15, 16);
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 77:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(20);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 21:
                  if ((0x800100000000000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 22:
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 23:
                  if ((0xffffff7bffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 32:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if (curChar == 45)
                     jjAddStates(15, 16);
                  break;
               case 38:
                  if (curChar == 46)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(21, 23);
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 30);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar != 46)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(31, 33);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(31, 33);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(50, 43);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(54, 43);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 43);
                  break;
               case 60:
               case 63:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 61:
                  if ((0xffffff7bffffdbffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 64:
                  if ((0x8400000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 68:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 69:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 70:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 79:
                  if (curChar == 47)
                     jjAddStates(13, 14);
                  break;
               case 80:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 83:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 84:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if (curChar == 42)
                     jjAddStates(44, 45);
                  break;
               case 86:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(87, 85);
                  break;
               case 87:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(87, 85);
                  break;
               case 88:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 89:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(90);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 92:
                  if (curChar == 58 && kind > 44)
                     kind = 44;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(0, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 77;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 1:
                  jjAddStates(46, 47);
                  break;
               case 3:
                  if (curChar == 100 && kind > 34)
                     kind = 34;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 108 && kind > 34)
                     kind = 34;
                  break;
               case 12:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(20);
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(48, 51);
                  break;
               case 25:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 27:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 35:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(36);
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 43:
                  if ((0x5000000050L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 61:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 62:
                  if (curChar == 92)
                     jjAddStates(60, 63);
                  break;
               case 63:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 65:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 72:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 73:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 78:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 81:
                  jjAddStates(64, 65);
                  break;
               case 84:
                  jjCheckNAddTwoStates(84, 85);
                  break;
               case 86:
               case 87:
                  jjCheckNAddTwoStates(87, 85);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(37, 39);
                  break;
               case 81:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 84:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 86:
               case 87:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(87, 85);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 94 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   90, 45, 46, 51, 52, 55, 56, 43, 91, 92, 23, 24, 26, 80, 83, 38, 
   44, 23, 24, 31, 26, 39, 40, 43, 45, 46, 51, 52, 55, 56, 43, 47, 
   48, 43, 55, 56, 43, 61, 62, 64, 61, 62, 69, 64, 86, 88, 1, 2, 
   25, 27, 30, 32, 41, 42, 49, 50, 53, 54, 57, 58, 63, 65, 68, 70, 
   81, 82, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\173", "\175", "\75", 
"\72", "\133", "\135", "\50", "\51", "\56", "\74", "\76", "\155\141\160", 
"\154\151\163\164", "\163\145\164", "\163\164\162\165\143\164", "\164\150\162\157\167\163", 
"\166\157\151\144", "\157\156\145\167\141\171", "\145\170\164\145\156\144\163", 
"\163\145\162\166\151\143\145", "\145\156\165\155", "\164\171\160\145\144\145\146", "\143\157\156\163\164", 
"\145\170\143\145\160\164\151\157\156", "\156\141\155\145\163\160\141\143\145", null, "\151\156\143\154\165\144\145", 
null, null, null, null, null, null, null, null, null, "\52", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3bfffffffe01L, 
};
static final long[] jjtoSkip = {
   0x1feL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[94];
private final int[] jjstateSet = new int[188];
protected char curChar;
/** Constructor. */
public ThriftParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ThriftParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 94; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
